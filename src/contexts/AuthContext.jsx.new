import { createContext, useContext, useEffect, useState } from 'react';
import { authService, settingsService } from '../services';

export const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [userSettings, setUserSettings] = useState(null);
  const [isVerified, setIsVerified] = useState(false);

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    try {
      const currentUser = await authService.getCurrentUser();
      setUser(currentUser);
      
      // Check verification status
      if (currentUser) {
        const verified = await authService.isEmailVerified(currentUser.$id);
        setIsVerified(verified);
        
        // Load user settings if user is logged in and verified
        if (verified) {
          const settings = await settingsService.getUserSettings(currentUser.$id);
          setUserSettings(settings);
        }
      }
    } catch (error) {
      console.error('Error checking user status:', error);
      setUser(null);
      setIsVerified(false);
    } finally {
      setLoading(false);
    }
  };

  const login = async (email, password) => {
    try {
      const { session, user } = await authService.login(email, password);
      setUser(user);
      
      // Check verification (should always be true since login enforces verification)
      const verified = await authService.isEmailVerified(user.$id);
      setIsVerified(verified);
      
      // Load user settings
      if (verified) {
        const settings = await settingsService.getUserSettings(user.$id);
        setUserSettings(settings);
      }
      
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const register = async (email, password, name) => {
    try {
      const result = await authService.createAccount(email, password, name);
      
      // Do not set user or log them in yet - they need to verify first
      return { 
        success: true, 
        userId: result.user.$id,
        isVerified: false,
        verificationSent: result.verificationSent,
        verificationError: result.verificationError,
        message: result.verificationSent 
          ? 'Please check your email to verify your account'
          : 'Account created, but email verification could not be sent. Please contact support.'
      };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const logout = async () => {
    try {
      await authService.logout();
      setUser(null);
      setUserSettings(null);
      setIsVerified(false);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const updateName = async (name) => {
    try {
      const updatedUser = await authService.updateName(name);
      setUser(updatedUser);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const updateUserSettings = async (newSettings) => {
    try {
      const settings = await settingsService.updateUserSettings(user.$id, newSettings);
      setUserSettings(settings);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const resendVerification = async (userId) => {
    try {
      await authService.resendVerification(userId);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        userSettings,
        loading,
        isVerified,
        checkAuth,
        login,
        register,
        logout,
        updateName,
        updateUserSettings,
        resendVerification
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
